reg_no = { '0'..'7' }

dec_number = @{ "-"? ~ ASCII_DIGIT+ }
hex_number = @{ "$" ~ "-"? ~ (ASCII_HEX_DIGIT)+ }
bin_number = @{ "%" ~ "-"? ~ (ASCII_BIN_DIGIT)+ }
oct_number = @{ "@" ~ "-"? ~ (ASCII_OCT_DIGIT)+ }

number     = _{ hex_number | bin_number | oct_number | dec_number | symbol }
bin_op     = _{ add_op | subtract | multiply | divide | modulo | and_op | or_op | rshift | lshift }
add_op     =  { "+" }
subtract   =  { "-" }
multiply   =  { "*" }
divide     =  { "/" }
modulo     =  { "\\" }
and_op     =  { "&" }
or_op      =  { "!" }
rshift     =  { ">>" }
lshift     =  { "<<" }
prefix_op  = _{ neg_op | not_op }
neg_op     =  { "-" }
not_op     =  { "~" }
atom       =  { number | "(" ~ expression ~ ")" }
expression = !{ prefix_op* ~ atom ~ (bin_op ~ prefix_op* ~ atom)* }

escaped_chars = _{ "\\" | "'" | "n" | "r" | "0" }
escape_seq    = @{ "\\" ~ escaped_chars }
string        = ${ "'" ~ (escape_seq | (!"'" ~ ANY))* ~ "'" }

symbol    = @{ (ASCII_ALPHA | ".") ~ (ASCII_ALPHANUMERIC | "." | "_" | "$")* }
reg_range = ${ (An ~ ("-" ~ An)?) | (Dn ~ ("-" ~ Dn)?) }
reglist   = ${ reg_range ~ ("/" ~ reg_range)* }

d16 = { expression }
// effective adressing modes
/// Data Register Direct Mode
/// EA Mode = 000
/// EA Reg field = Reg number
/// No. extension words = 0
Dn = ${ ^"D" ~ reg_no }

/// Address Register Direct Mode
/// EA Mode = 001
/// EA Reg field = Reg number
/// No. extension words = 0
An = ${ ^"A" ~ reg_no }

/// Address Register Indirect Mode
/// EA Mode = 010
/// EA Reg field = Reg number
/// No. extension words = 0
address_indirect = ${ ^"(A" ~ reg_no ~ ")" }

/// Address Register Indirect with Postincrement Mode
/// EA Mode = 011
/// EA Reg field = Reg number
/// No. extension words = 0
address_indirect_postinc = ${ ^"(A" ~ reg_no ~ ")+" }

/// Address Register Indirect with Predecrement Mode
/// EA Mode = 100
/// EA Reg field = Reg number
/// No. extension words = 0
address_indirect_predecr = ${ ^"-(A" ~ reg_no ~ ")" }

/// Address Register Indirect with Displacement Mode
/// EA Mode = 101
/// EA Reg field = Reg number
/// No. extension words = 1 (displacement)
address_indirect_disp = ${ d16 ~ ^"(A" ~ reg_no ~ ")" }

// TODO 2.2.7
// TODO 2.2.8
// TODO 2.2.9
// TODO 2.2.10
// TODO 2.2.11
// TODO 2.2.12
// TODO 2.2.13
// TODO 2.2.14
// TODO 2.2.15

/// Absolute Short Addressing Mode
/// EA Mode = 111
/// EA Reg field = 000
/// No. extension words = 1 (short addr)
absolute_short = ${ "(" ~ expression ~ ^").W" }

/// Absolute Long Addressing Mode (for .L)
/// EA Mode = 111
/// EA Reg field = 001
/// No. extension words = 2 (high addr, low addr)
absolute_long = ${ ("(" ~ expression ~ ^").L") | ("(" ~ expression ~ ^")") }

/// Immediate Data
/// EA Mode = 111
/// EA Reg field = 100
/// No. extension words = 1,2,4, or 6
immediate_data = ${ "#" ~ expression }

src_ea    = _{ absolute_short | absolute_long | Dn | An | address_indirect | address_indirect_disp | address_indirect_postinc | address_indirect_predecr | immediate_data }
dst_ea    = _{ absolute_short | absolute_long | Dn | address_indirect | address_indirect_disp | address_indirect_postinc | address_indirect_predecr }
word_size =  { ^".W" | ^".L" }
int_size  = @{ ^".B" | word_size }
Rn        =  { An | Dn }
// FIXME floating point

// ============================ Data movement instructions ==================================================================================================
// TODO EXG
// TODO FMOVE family
/// Format: `0100[REG 3]111[EA [MODE 3][REG 3]]`
LEA = { ^"LEA" ~ (address_indirect | address_indirect_disp | absolute_short | absolute_long) ~ "," ~ An }

/// Format: `0100111001010[REG 3] // [DISP 16]`
LINK = { ^"LINK" ~ An ~ "," ~ immediate_data }

MOVE_mnemonic = ${ ^"MOVE" ~ int_size? }

/// Format: `00[SIZE 2][DST [REG 3][MODE 3]][SRC [MODE 3][REG 3]]`
MOVE = { MOVE_mnemonic ~ src_ea ~ "," ~ dst_ea }

// TODO MOVE16

MOVEA_mnemonic = ${ (^"MOVEA" | ^"MOVE") ~ word_size? }

/// Format: `00[SIZE 2][DSTREG 3]001[SRC [MODE 3][REG 3]]`
///
/// [^note]: Allows for use with MOVE Mnemonic
MOVEA = { MOVEA_mnemonic ~ src_ea ~ "," ~ An }

// /// Format 0100001011[SRC [MODE 3][REG 3]]
// MOVE_FROM_CCR = { ^"MOVE" ~ ^"CCR" ~ "," ~ dst_ea }

// /// Format 0100010011[SRC [MODE 3][REG 3]]
// MOVE_TO_CCR = { ^"MOVE" ~ src_ea ~ "," ~ ^"CCR" }

// /// Format 0100000011[SRC [MODE 3][REG 3]]
// MOVE_FROM_SR = { ^"MOVE" ~ ^"SR" ~ "," ~ dst_ea }

MOVEM_mnemonic = ${ ^"MOVEM" ~ word_size? }

/// Format: `00[SIZE 2][DSTREG 3]001[SRC [MODE 3][REG 3]]`
MOVEM = {
    MOVEM_mnemonic ~ ((reglist ~ "," ~ (address_indirect | address_indirect_predecr | address_indirect_disp | absolute_short | absolute_long)) | ((address_indirect | address_indirect_postinc | address_indirect_disp | absolute_short | absolute_long) ~ "," ~ reglist))
}

// TODO MOVEP
// TODO MOVEQ

/// Format: `0100100001[EA [MODE 3][REG 3]]`
PEA = { ^"PEA" ~ (address_indirect | address_indirect_disp | absolute_short | absolute_long) }

/// Format: `0100111001011[REG 3]`
UNLK = { ^"UNLK" ~ An }

data_movement_instr = _{ LEA | LINK | MOVE | MOVEA | MOVEM | PEA | UNLK }

// =================================== Integer arithmetic =========================

ADD_mnemonic = ${ ^"ADD" ~ int_size? }

/// Format: `1101[REG 3][OPMODE 3][EA [MODE 3][REG 3]]`
///
/// |        OPMODE | BYTE | WORD | LONG |
/// |---------------|------|------|------|
/// | ea + Dn -> Dn | 000  | 001  | 010  |
/// | Dn + ea -> ea | 100  | 101  | 110  |
ADD = { ADD_mnemonic ~ ((Dn ~ "," ~ (address_indirect | address_indirect_postinc | address_indirect_predecr | address_indirect_disp | absolute_short | absolute_long)) | (src_ea ~ "," ~ Dn)) }

ADDA_mnemonic = ${ (^"ADDA" | ^"ADD") ~ word_size? }

/// Format: `1101[REG 3][OPMODE 3][EA [MODE 3][REG 3]]`
///
/// OPMODE: 011 -> word ; 111 -> Long
ADDA = { ADDA_mnemonic ~ src_ea ~ "," ~ An }

ADDI_mnemonic = ${ (^"ADDI" | ^"ADD") ~ int_size? }

/// Format: `00000110[SIZE 2][EA [MODE 3][REG 3]]`
ADDI = { ADDI_mnemonic ~ immediate_data ~ "," ~ dst_ea }

// TODO ADDQ
// TODO ADDX
CLR_mnemonic = ${ ^"CLR" ~ int_size? }

/// Format: `01000010[SIZE 3][EA [MODE 3][REG 3]]`
CLR = { CLR_mnemonic ~ dst_ea }

CMP_mnemonic = ${ ^"CMP" ~ int_size? }

/// Format: `1011[REG 3][OPMODE 3][EA [MODE 3][REG 3]]`
///
/// OPMODE: 000 -> Byte ; 001 -> word ; 010 -> Long
CMP = { CMP_mnemonic ~ src_ea ~ "," ~ Dn }

CMPA_mnemonic = ${ (^"CMPA" | ^"CMP") ~ word_size? }

/// Format: `1011[REG 3][OPMODE][EA [MODE 3][REG 3]]`
///
/// OPMODE: 011 -> word ; 111 -> Long
CMPA = { CMPA_mnemonic ~ src_ea ~ "," ~ An }

CMPI_mnemonic = ${ (^"CMPI" | ^"CMP") ~ int_size? }

/// Format: `00001100[SIZE 2][EA [MODE 3][REG 3]]`
CMPI = { CMPI_mnemonic ~ immediate_data ~ "," ~ dst_ea }

// TODO CMPM
// TODO CMP2
// TODO DIV family
// TODO EXT family
// TODO MUL family
// TODO NEG family

SUB_mnemonic = ${ ^"SUB" ~ int_size? }

/// Format: `1001[REG 3][OPMODE 3][EA [MODE 3][REG 3]]`
///
/// |        OPMODE | BYTE | WORD | LONG |
/// |---------------|------|------|------|
/// | Dn - ea -> Dn | 000  | 001  | 010  |
/// | ea - Dn -> ea | 100  | 101  | 110  |
SUB = { SUB_mnemonic ~ ((Dn ~ "," ~ (address_indirect | address_indirect_postinc | address_indirect_predecr | address_indirect_disp | absolute_short | absolute_long)) | (src_ea ~ "," ~ Dn)) }

SUBA_mnemonic = ${ (^"SUBA" | ^"SUB") ~ word_size? }

/// Format: `1001[REG 3][OPMODE 3][EA [MODE 3][REG 3]]`
///
/// OPMODE: 011 -> word ; 111 -> Long
SUBA = { SUBA_mnemonic ~ src_ea ~ "," ~ An }

SUBI_mnemonic = ${ (^"SUBI" | ^"SUB") ~ int_size? }

/// Format: `00000100[SIZE 2][EA [MODE 3][REG 3]]`
SUBI = { SUBI_mnemonic ~ immediate_data ~ "," ~ dst_ea }

// TODO SUBQ
// TODO SUBX

int_arithmetic_instr = _{ADD | ADDA | ADDI | CLR | CMP | CMPA | CMPI | SUB | SUBA | SUBI}

// TODO LOGICAL instr

// TODO Shift and rotate instr

// TODO Bit manipulation instructions

// TODO Bit field instructions

// TODO Binary coded decimal instructions

// =================================== Program control =========================
/// # Conditionals
/// * T* True 0000 1
/// * F * False 0001 0
/// * HI High 0010 C Λ Z
/// * LS Low or Same 0011 C V Z
/// * CC(HI) Carry Clear 0100 C
/// * CS(LO) Carry Set 0101 C
/// * NE Not Equal 0110 Z
/// * EQ Equal 0111 Z
/// * VC Overflow Clear 1000 V
/// * VS Overflow Set 1001 V
/// * PL Plus 1010 N
/// * MI Minus 1011 N
/// * GE Greater or Equal 1100 N Λ V V N Λ V
/// * LT Less Than 1101 N Λ V V N Λ V
/// * GT Greater Than 1110 N Λ V Λ Z V N Λ V Λ Z
/// * LE Less or Equal 1111 Z V N Λ V V N Λ V
/// [^note]: *Not available for the Bcc instruction.
cc = { ^"CC" | ^"LS" | ^"CS" | ^"LT" | ^"EQ" | ^"MI" | ^"F" | ^"NE" | ^"GE" | ^"PL" | ^"GT" | ^"T" | ^"HI" | ^"VC" | ^"LE" | ^"VS" }
bcc_cc = { ^"CC" | ^"LS" | ^"CS" | ^"LT" | ^"EQ" | ^"MI"  | ^"NE" | ^"GE" | ^"PL" | ^"GT"  | ^"HI" | ^"VC" | ^"LE" | ^"VS" }
small_size = { ^".B" | ^".W" }

Bcc_mnemonic = ${ ^"B" ~ bcc_cc ~ small_size?}
/// Format: 0110[COND 4][8-BIT-DISP 8] [16-BIT-DISP 16]? [32-BIT-DISP 16]?
///
/// 8-BIT-DISP: 0x00 -> 16 bit disp  
/// 8-BIT-DISP: 0xff -> 32 bit disp
/// [^note]: A branch to the immediately following instruction automatically uses the 16-bit displacement format because the 8-bit displacement field contains $00 (zero offset).
Bcc = {Bcc_mnemonic ~ symbol }
// TODO FBcc
// TODO DBcc & FDBcc
// TODO Scc & FScc
BRA_mnemonic = ${ ^"BRA"/* ~ small_size?*/ }
/// FORMAT: 01100000[8-BIT-DISP 8] [16-BIT-DISP 16]? [32-BIT-DISP 16]?
///
/// 8-BIT-DISP: 0x00 -> 16 bit disp  
/// 8-BIT-DISP: 0xff -> 32 bit disp
/// [^note]: A branch to the immediately following instruction automatically uses the 16-bit displacement format because the 8-bit displacement field contains $00 (zero offset).
BRA = { BRA_mnemonic ~ symbol }
BSR_mnemonic = ${ ^"BSR"/* ~ small_size?*/ }
/// FORMAT: 01100001[8-BIT-DISP 8] [16-BIT-DISP 16]? [32-BIT-DISP 16]?
///
/// 8-BIT-DISP: 0x00 -> 16 bit disp  
/// 8-BIT-DISP: 0xff -> 32 bit disp
/// [^note]: A branch to the immediately following instruction automatically uses the 16-bit displacement format because the 8-bit displacement field contains $00 (zero offset).
BSR = { BSR_mnemonic ~ symbol }
/// FORMAT: 0100111011[EA [MODE 3][REG 3]]
JMP = { ^"JMP" ~  (address_indirect | address_indirect_disp | absolute_short | absolute_long)}
/// FORMAT: 0100111010[EA [MODE 3][REG 3]]
JSR = { ^"JSR" ~  (address_indirect | address_indirect_disp | absolute_short | absolute_long)}
/// FORMAT: 0100111001110001
NOP = { ^"NOP" }
// TODO FNOP
// TODO RTD
// TODO RTR = { ^"RTR" }
/// FORMAT: 0100111001110101
RTS = { ^"RTS" }
// TODO TST F& FTST

// =================================== System control =========================
// TODO

program_control_instr = _{ Bcc | BRA | BSR | JMP | JSR | NOP | RTS }

instr = _{data_movement_instr | int_arithmetic_instr | program_control_instr }
sol_label = ${ symbol ~ ":"? }
instruction =  { (!instr ~ sol_label)? ~ instr }

// PSEUDOINSTR
org = { (^"ORG" | (sol_label? ~ ^"ORG")) ~ expression }
equ = { sol_label ~ ^"EQU" ~ expression }

dc_mnemonic     = ${ ^"DC" ~ int_size? }
dc_item         = _{ expression | string }
define_constant =  { (dc_mnemonic | (sol_label ~ dc_mnemonic)) ~ dc_item ~ ("," ~ dc_item)* }

ds_mnemonic    = ${ ^"DS" ~ int_size? }
define_storage =  { (ds_mnemonic | (sol_label ~ ds_mnemonic)) ~ expression }

include_file = @{ (!EOL ~ ANY)* ~ EOL }
include      =  { ^"INCLUDE" ~ include_file }

pseudo_instr = _{include | org | equ | define_constant | define_storage}

statement = {pseudo_instr | instruction}
program = {SOI ~ statement* ~ EOI}

EOL        = @{ NEWLINE | &EOI }
WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT    = _{ ("*" | ";") ~ (!EOL ~ ANY)* ~ &EOL }
